version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: podcastfy-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-podcastfy}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-podcastfy_password}
      POSTGRES_DB: ${POSTGRES_DB:-podcastfy}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-podcastfy}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: podcastfy-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  api:
    build:
      context: ..
      dockerfile: .docker/api.Dockerfile
    container_name: podcastfy-api
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-podcastfy}:${POSTGRES_PASSWORD:-podcastfy_password}@postgres:5432/${POSTGRES_DB:-podcastfy}
      - REDIS_URL=redis://redis:6379/0
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=RS256
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
    volumes:
      - ../apps/api:/app/apps/api
      - ../podcastfy:/app/podcastfy
      - ../data:/app/data
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  celery-worker:
    build:
      context: ..
      dockerfile: .docker/api.Dockerfile
    container_name: podcastfy-celery-worker
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-podcastfy}:${POSTGRES_PASSWORD:-podcastfy_password}@postgres:5432/${POSTGRES_DB:-podcastfy}
      - REDIS_URL=redis://redis:6379/0
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
    volumes:
      - ../apps/api:/app/apps/api
      - ../podcastfy:/app/podcastfy
      - ../data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A src.worker worker --loglevel=info --concurrency=4

  # Flower (Celery monitoring)
  flower:
    build:
      context: ..
      dockerfile: .docker/api.Dockerfile
    container_name: podcastfy-flower
    environment:
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker
    command: celery -A src.worker flower --port=5555

  # Next.js Frontend
  web:
    build:
      context: ..
      dockerfile: .docker/web.Dockerfile
    container_name: podcastfy-web
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
    volumes:
      - ../apps/web:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - api
    command: npm run dev

volumes:
  postgres_data:
  redis_data:
